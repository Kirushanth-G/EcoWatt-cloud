// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EcoData {
  id                BigInt   @id @default(autoincrement())
  vac1              Float    @map("vac1")              // L1 Phase voltage (V)
  iac1              Float    @map("iac1")              // L1 Phase current (A)
  fac1              Float    @map("fac1")              // L1 Phase frequency (Hz)
  vpv1              Float    @map("vpv1")              // PV1 input voltage (V)
  vpv2              Float    @map("vpv2")              // PV2 input voltage (V)
  ipv1              Float    @map("ipv1")              // PV1 input current (A)
  ipv2              Float    @map("ipv2")              // PV2 input current (A)
  temperature       Float    @map("temperature")       // Inverter internal temperature (Â°C)
  exportPower       Float    @map("export_power")      // Export power percentage (%)
  outputPower       Float    @map("output_power")      // Inverter current output power (W)
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("eco_data")
}

model ConfigurationLog {
  id                BigInt   @id @default(autoincrement())
  deviceId          String?  @map("device_id")         // Optional device identifier
  configSent        Json     @map("config_sent")       // Configuration sent to device
  deviceResponse    Json?    @map("device_response")   // Device acknowledgment response
  status            String   @map("status")            // SUCCESS, FAILED, TIMEOUT
  errorMessage      String?  @map("error_message")     // Error details if failed
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("configuration_logs")
}

model WriteCommand {
  id                BigInt   @id @default(autoincrement())
  value             Int      @map("value")             // Value to write (0-100)
  status            String   @map("status")            // PENDING, SENDING, SUCCESS, FAILED
  deviceResponse    Json?    @map("device_response")   // Device acknowledgment response
  errorMessage      String?  @map("error_message")     // Error details if failed
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("write_commands")
}

model FotaUpdate {
  id                BigInt   @id @default(autoincrement())
  firmwareSha256    String   @map("firmware_sha256")   // SHA-256 hash of firmware
  firmwareSize      Int      @map("firmware_size")     // Firmware size in bytes
  status            String   @map("status")            // PENDING, SENDING, COMPLETED, FAILED
  deviceResponse    Json?    @map("device_response")   // Device update status response
  errorMessage      String?  @map("error_message")     // Error details if failed
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  fotaLogs          FotaLog[]

  @@map("fota_updates")
}

model FirmwareStorage {
  id                Int      @id @default(1)           // Always 1 - single firmware
  filename          String   @map("filename")          // Original filename
  size              Int      @map("size")              // File size in bytes
  sha256            String   @map("sha256")            // SHA-256 hash
  uploadedAt        DateTime @map("uploaded_at")       // Upload timestamp

  @@map("firmware_storage")
}

model FotaLog {
  id                  BigInt   @id @default(autoincrement())
  fotaUpdateId        BigInt?  @map("fota_update_id")
  firmwareSha256      String   @map("firmware_sha256")
  downloadSuccess     Boolean  @map("download_success")
  verificationSuccess Boolean  @map("verification_success")
  updateSuccess       Boolean  @map("update_success")
  overallSuccess      Boolean  @map("overall_success")
  errorStage          String?  @map("error_stage")       // DOWNLOAD, VERIFICATION, UPDATE
  errorCode           String?  @map("error_code")        // Error code from device
  downloadDurationMs  Int?     @map("download_duration_ms")
  totalDurationMs     Int?     @map("total_duration_ms")
  rawLog              String   @map("raw_log")           // Raw log text
  logFilePath         String   @map("log_file_path")     // Path to saved log file
  createdAt           DateTime @default(now()) @map("created_at")
  fotaUpdate          FotaUpdate? @relation(fields: [fotaUpdateId], references: [id])

  @@map("fota_logs")
}

